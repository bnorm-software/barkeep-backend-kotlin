package com.bnorm.barkeep.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Bar} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BarAssert extends AbstractAssert<BarAssert, Bar> {

  /**
   * Creates a new <code>{@link BarAssert}</code> to make assertions on actual Bar.
   * @param actual the Bar we want to make assertions on.
   */
  public BarAssert(Bar actual) {
    super(actual, BarAssert.class);
  }

  /**
   * An entry point for BarAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBar)</code> and get specific assertion with code completion.
   * @param actual the Bar we want to make assertions on.
   * @return a new <code>{@link BarAssert}</code>
   */
  public static BarAssert assertThat(Bar actual) {
    return new BarAssert(actual);
  }

  /**
   * Verifies that the actual Bar's description is equal to the given one.
   * @param description the given description to compare the actual Bar's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Bar's description is not equal to the given one.
   */
  public BarAssert hasDescription(String description) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar's id is equal to the given one.
   * @param id the given id to compare the actual Bar's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Bar's id is not equal to the given one.
   */
  public BarAssert hasId(Long id) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar's ingredients contains the given Ingredient elements.
   * @param ingredients the given elements that should be contained in actual Bar's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual Bar's ingredients does not contain all given Ingredient elements.
   */
  public BarAssert hasIngredients(Ingredient... ingredients) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // check that given Ingredient varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar's ingredients contains <b>only<b> the given Ingredient elements and nothing else in whatever order.
   * @param ingredients the given elements that should be contained in actual Bar's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual Bar's ingredients does not contain all given Ingredient elements.
   */
  public BarAssert hasOnlyIngredients(Ingredient... ingredients) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // check that given Ingredient varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar's ingredients does not contain the given Ingredient elements.
   *
   * @param ingredients the given elements that should not be in actual Bar's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual Bar's ingredients contains any given Ingredient elements.
   */
  public BarAssert doesNotHaveIngredients(Ingredient... ingredients) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // check that given Ingredient varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar has no ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual Bar's ingredients is not empty.
   */
  public BarAssert hasNoIngredients() {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have ingredients but had :\n  <%s>";
    
    // check
    if (actual.getIngredients().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getIngredients());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Bar's owner is equal to the given one.
   * @param owner the given owner to compare the actual Bar's owner to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Bar's owner is not equal to the given one.
   */
  public BarAssert hasOwner(User owner) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting owner of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualOwner = actual.getOwner();
    if (!Objects.areEqual(actualOwner, owner)) {
      failWithMessage(assertjErrorMessage, actual, owner, actualOwner);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Bar's title is equal to the given one.
   * @param title the given title to compare the actual Bar's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Bar's title is not equal to the given one.
   */
  public BarAssert hasTitle(String title) {
    // check that actual Bar we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
